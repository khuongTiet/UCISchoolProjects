(defun my_length (l)
    (cond ((null l) 0)
          (t (+ 1 (my_length(cdr l))))))

(defun my_memq (A L)
    (cond ((null l) nil)
          ((eq A (car l)) l)
          (t (my_memq A (cdr l)))))

(defun my_append (L1 L2)
    (cond ((null L1) L2)
          (t (cons (car L1) (my_append (cdr L1) L2)))))

(defun my_attach (O L)
  (cond ((null L) (cons O nil))
        (t (cons (car L) (my_attach O (cdr L))))))

(defun my_assoc (A L)
    (cond ((null L) nil)
          ((eq A (car (car L))) (car L))
          (t (my_assoc A (cdr L)))))

(defun freq (A L)
    (cond ((null L) 0)
          ((eq A (car L)) (+ 1 (freq A (cdr L))))
          ((listp (car L)) (+ (freq A (cdr L)) (+ 0 (freq A (car L)))) )
          (t (+ 0 (freq A (cdr L))))
    )
)

(defun mapping (L val)
    (cond ((null L) nil)
          ((> val (car (car L))) (cons (car (cdr (car L))) (mapping (cdr L) val)))
          (t (mapping (cdr L) val))))

(defun my_last (A L)
  (last_helper A L nil)
)

(defun last_helper (A L B)
  (cond ((null L) (cond ((null B) nil)
                        (t B)))
        ((eq A (car L)) (last_helper A (cdr L) (cons (car L) (cdr L))))
        (t (last_helper A (cdr L) B))
  )
)

(defun my-reverse (L)
  (reverse-help L nil)
)

(defun reverse-help (L A)
  (cond ((null L) A)
        (t (reverse-help (cdr L) (cons (car L) A)))
  )
)

(defun is-pattern? (pat str)
  (cond ((null pat) nil)
        ((null str) nil)
        ((pattern-help pat str) str)
        (t (is-pattern? pat (cdr str)))
  )
)

(defun pattern-help (pat str)
  (cond ((null pat) t)
        ((null str) nil)
        ((not (eq (car pat) (car str))) nil)
        (t (pattern-help (cdr pat) (cdr str)))
  )
)

(defun first-atom (L)
  (cond ((null L) nil)
        ((atom (car L)) (car L))
        ((listp (car L)) (first-atom(cdr L)) (first-atom (car L)))
        (t (first-atom (cdr L)))

  )
)

(defun find-all (A L)
  (cond ((null L) nil)
        ((eq A (car L)) (cons (car (cdr L)) (find-all A (cdr L))))
        ((listp (car L)) (cons (find-all A (cdr L)) (find-all A (car L))))
        (t (find-all A (cdr L)))
  )
)
