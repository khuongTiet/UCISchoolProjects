# Setup
c-->from imp import reload
c-->import q2solution
c-->reload(q2solution)
c-->from q2solution import pages, expand_re
c-->import re
# Read/Test Regular Expression Pattern (read from pattern.txt)
c-->p = open('pattern.txt').read().rstrip()
c-->print('   Testing the pattern: ',p)

# The following text should match the pattern
!=-->re.match(p,'3')-->None
!=-->re.match(p,'1000')-->None
!=-->re.match(p,'  3')-->None
!=-->re.match(p,'3  ')-->None
!=-->re.match(p,' 3  ')-->None
!=-->re.match(p,'15-20')-->None
!=-->re.match(p,' 15 - 20  ')-->None
!=-->re.match(p,'  2048   - 4096  ')-->None
!=-->re.match(p,'15:10')-->None
!=-->re.match(p,' 15 : 10  ')-->None
!=-->re.match(p,' 2048  :100  ')-->None

# The following text should NOT match the pattern
==-->re.match(p,'03')-->None
==-->re.match(p,'2 43')-->None
==-->re.match(p,'2x3')-->None
==-->re.match(p,'x23')-->None
==-->re.match(p,'23x')-->None
==-->re.match(p,'15--30')-->None
==-->re.match(p,'15-03')-->None
==-->re.match(p,'15-20-30')-->None
==-->re.match(p,'1 5-20')-->None
==-->re.match(p,'15-2 0')-->None
==-->re.match(p,'15:010')-->None
==-->re.match(p,'15::10')-->None
==-->re.match(p,'15:10:10')-->None
==-->re.match(p,'1 5:10')-->None
==-->re.match(p,'15:1 0')-->None
==-->re.match(p,'15-:20')-->None
==-->re.match(p,'15-2:10')-->None
==-->re.match(p,'15:2-10')-->None

# Testing pages
# The following calls should produce the results shown
e-->pages('5')-->[5]
e-->pages('5,6,8,6')-->[5, 6, 8]
e-->pages(' 5 , 6 , 8 , 6 ')-->[5, 6, 8]
e-->pages('5-8')-->[5, 6, 7, 8]
e-->pages('5  - 8   ')-->[5, 6, 7, 8]
e-->pages('5 - 8 ,9, 11-13')-->[5, 6, 7, 8, 9, 11, 12, 13]
e-->pages('4:3')-->[4, 5, 6]
e-->pages('4:3,8,11:2,20')-->[4, 5, 6, 8, 11, 12, 20]
e-->pages('3-4,8,11:2,15-17,20:4')-->[3, 4, 8, 11, 12, 15, 16, 17, 20, 21, 22, 23]
e-->pages('3 -  4, 8 ,11 :2,15 -17,20 : 4 ')-->[3, 4, 8, 11, 12, 15, 16, 17, 20, 21, 22, 23]

# The following calls should raise exceptions
^-->pages('05')-->AssertionError
^-->pages('05-6')-->AssertionError
^-->pages('6-05')-->AssertionError
^-->pages('7-4')-->AssertionError
^-->pages('5,,5')-->AssertionError
^-->pages('5-:5')-->AssertionError
^-->pages('5:05')-->AssertionError
^-->pages('5:-5')-->AssertionError

# Testing expand_re
c-->pd = dict(digit=r'\d', integer=r'[=-]?#digit##digit#*')
c-->expand_re(pd)
==-->dict(pd.items())-->{'digit': '\\d', 'integer': '[=-]?(\\d)(\\d)*'}
c-->pd = dict(integer=r'[+-]?\d+', integer_range =r'#integer#(..#integer#)?', integer_list  =r'#integer_range#(?,#integer_range#)*', integer_set =r'{#integer_list#?}')
c-->expand_re(pd)
==-->dict(pd.items())-->{'integer' : '[+-]?\\d+', 'integer_range': '([+-]?\\d+)(..([+-]?\\d+))?', 'integer_list' : '(([+-]?\\d+)(..([+-]?\\d+))?)(?,(([+-]?\\d+)(..([+-]?\\d+))?))*','integer_set'  : '{((([+-]?\\d+)(..([+-]?\\d+))?)(?,(([+-]?\\d+)(..([+-]?\\d+))?))*)?}'}
c-->pd = pd = dict(a='correct',b='#a#',c='#b#',d='#c#',e='#d#',f='#e#',g='#f#')
c-->expand_re(pd)
==-->dict(pd.items())-->{'d': '(((correct)))', 'c': '((correct))', 'b': '(correct)','a': 'correct', 'g': '((((((correct))))))', 'f': '(((((correct)))))','e': '((((correct))))'}
